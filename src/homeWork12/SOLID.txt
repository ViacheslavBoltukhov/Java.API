Для проверки у нас есть два класса: User и UserComparator.
Проверим по алгоритму класс User.
1. Принцип единственной ответственности (Single Responsibility Principle, SRP):
Класс User только одну задачу: хранит минимальные атрибуты пользователя - ФИО.
Т.к. данный класс отвечает только за хранение ФИО, то он соответствует приципу единственной ответственности.
2. Принцип открытости/закрытости (Open/Closed Principle, OCP):
Класс User прекрасно раширяется без изменения его исходного кода, что и было поделано в рамках домашней работы
к 4 минару при реализации класса Teacher.
Т.к. данный класс можно расширить без изменения его исходного кода, то он соответствует приципу открытости/закрытости.
3. Принцип подстановки Барбары Лисков (Liskov Substitution Principle, LSP):
Производные от User классы Teacher и Student имеют ФИО и могут быть использованы вместо него без нарушения корректности
программы и не изменяют поведение класса User.
Поэтому данный класс соответствует приципу подстановки Барбары Лисков.
4. Принцип разделения интерфейса (Interface Segregation Principle, ISP):
Класс User содержат только необходимые методы, которые используются для реализации хранения актуальной информации о ФИО
пользователя.
Поэтому данный класс соответствует приципу разделения интерфейса.
5. Принцип инверсии зависимостей (Dependency Inversion Principle, DIP):
Класс User не зависит ни от одного класса
Поэтому данный класс соответствует приципу инверсии зависимостей.
Класс User полность соответствует принципам SOLID.

Проверим по алгоритму класс UserComparator.
1. Принцип единственной ответственности (Single Responsibility Principle, SRP):
Класс UserComparator реализует интерфейс Comparator для класса User и его наследников и решает одну задачу:
сравнение двух экземпляров по ФИО.
Данный класс соответствует приципу единственной ответственности.
2. Принцип открытости/закрытости (Open/Closed Principle, OCP):
Трудно придумать как можно расширить этот специфический класс, т.к. для сравнения по другим критериям нужно реализовать
независимый от этого класса Comparator. А сравнение по фио реализовано полность.
Данный класс соответствует приципу открытости/закрытости.
3. Принцип подстановки Барбары Лисков (Liskov Substitution Principle, LSP):
Производные классы не планируюся в принципе для компараторов.
Данный класс соответствует приципу подстановки Барбары Лисков.
4. Принцип разделения интерфейса (Interface Segregation Principle, ISP):
Класс содержит единственный метод реализующий интерфейс Comparator полностью выполняющий функцию сравнения
 двух объектов по ФИО.
Данный класс соответствует приципу разделения интерфейса.
5. Принцип инверсии зависимостей (Dependency Inversion Principle, DIP):
Класс не имеет зависимостей от других классов. Он зависит только от наличия полей ФИО и возможности получения
 их значений в сравниваемых объектах.
Данный класс соответствует приципу инверсии зависимостей.
Класс UserComparator полность соответствует принципам SOLID.